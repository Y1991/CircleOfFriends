//
//  LBPhotoBrowserImageView.m
//
//  Created by 刘博 on 16/5/4.
//  Copyright © 2016年 刘博. All rights reserved.
//

#import "LBPhotoBrowserImageView.h"
#import "LBWaitingView.h"

#define LB_BACKGROUND_COLOR [UIColor colorWithRed:0 green:0 blue:0 alpha:0.95]

@interface LBPhotoBrowserImageView ()

@property (nonatomic, strong) UIImageView   *scrollImageView;
@property (nonatomic, strong) UIScrollView  *zoomingScroolView;
@property (nonatomic, strong) UIImageView   *zoomingImageView;
@property (nonatomic, strong) LBWaitingView *waitingView;
@property (nonatomic, strong) UIScrollView  *scroolView;

@end

@implementation LBPhotoBrowserImageView

#pragma mark - override

- (id)init {
    self = [super init];
    if (self) {
        self.userInteractionEnabled = YES;
        self.contentMode = UIViewContentModeScaleAspectFit;
        _totalScale = 1.0;
        
        // 捏合手势缩放图片
        UIPinchGestureRecognizer *pinch = [[UIPinchGestureRecognizer alloc] initWithTarget:self
                                                                                    action:@selector(imagePinch:)];
        [self addGestureRecognizer:pinch];
    }
    return self;
}

#pragma mark - event respons

- (void)imagePinch:(UIPinchGestureRecognizer *)recognizer {
    if (![self.zoomingScroolView isDescendantOfView:self]) {
        [self addSubview:self.zoomingScroolView];
    }
    CGFloat scale = recognizer.scale;
    CGFloat temp = _totalScale + (scale - 1);
    [self setTotalScale:temp];
    recognizer.scale = 1.0;
}

#pragma mark - public method

- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder {
    LBWaitingView *waiting = [[LBWaitingView alloc] init];
    waiting.bounds = CGRectMake(0, 0, 100, 100);
    waiting.mode = LBWaitingViewModeLoopDiagram;
    _waitingView = waiting;
    [self addSubview:waiting];
    
    
    __weak LBPhotoBrowserImageView *imageViewWeak = self;
    
    [self sd_setImageWithURL:url placeholderImage:placeholder options:SDWebImageRetryFailed progress:^(NSInteger receivedSize, NSInteger expectedSize) {
        imageViewWeak.progress = (CGFloat)receivedSize / expectedSize;
        
    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
        [_waitingView removeFromSuperview];
        
        
        if (error) {
            UILabel *label = [[UILabel alloc] init];
            label.bounds = CGRectMake(0, 0, 160, 30);
            label.center = CGPointMake(imageViewWeak.bounds.size.width * 0.5, imageViewWeak.bounds.size.height * 0.5);
            label.text = @"图片加载失败";
            label.font = [UIFont systemFontOfSize:16];
            label.textColor = [UIColor whiteColor];
            label.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.8];
            label.layer.cornerRadius = 5;
            label.clipsToBounds = YES;
            label.textAlignment = NSTextAlignmentCenter;
            [imageViewWeak addSubview:label];
        } else {
            _scrollImageView.image = image;
            [_scrollImageView setNeedsDisplay];
        }
        
    }];
}

#pragma mark - private method

// 清除缩放
- (void)clearScale {
    [self.zoomingScroolView removeFromSuperview];
    self.zoomingScroolView = nil;
    self.zoomingImageView = nil;
//    _totalScale = 1.0;
}

#pragma mark - setters

- (void)setTotalScale:(CGFloat)totalScale {
    if ((_totalScale < 0.5 && totalScale < _totalScale) ||
        (_totalScale > 2.0 && totalScale > _totalScale))
        return; // 最大缩放 2倍,最小0.5倍
    
    [self zoomWithScale:totalScale];
}

- (void)zoomWithScale:(CGFloat)scale {
    _totalScale = scale;
    
    self.zoomingImageView.transform = CGAffineTransformMakeScale(scale, scale);
    if (scale > 1) {
        CGFloat contentW = self.zoomingImageView.frame.size.width;
        CGFloat contentH = MAX(self.zoomingImageView.frame.size.height, self.frame.size.height);
        
        self.zoomingImageView.center = CGPointMake(contentW * 0.5, contentH * 0.5);
        self.zoomingScroolView.contentSize = CGSizeMake(contentW, contentH);
        
        CGPoint offset = self.zoomingScroolView.contentOffset;
        offset.x = (contentW - self.zoomingScroolView.frame.size.width) * 0.5;
        self.zoomingScroolView.contentOffset = offset;
        
    } else {
        self.zoomingScroolView.contentSize = self.zoomingScroolView.frame.size;
        self.zoomingScroolView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0);
        self.zoomingImageView.center = self.zoomingScroolView.center;
    }
}

- (void)setProgress:(CGFloat)progress {
    _progress = progress;
    _waitingView.progress = progress;
    
}

#pragma mark - getters

- (UIScrollView *)zoomingScroolView {
    if (!_zoomingScroolView) {
        _zoomingScroolView = [[UIScrollView alloc] initWithFrame:self.bounds];
        _zoomingScroolView.backgroundColor = LB_BACKGROUND_COLOR;
        _zoomingScroolView.contentSize = self.bounds.size;
        [_zoomingScroolView addSubview:self.zoomingImageView];
        self.zoomingImageView.center = _zoomingScroolView.center;
    }
    return _zoomingScroolView;
}

- (UIImageView *)zoomingImageView {
    if (!_zoomingImageView) {
        _zoomingImageView = [[UIImageView alloc] initWithImage:self.image];
        CGSize imageSize = _zoomingImageView.image.size;
        CGFloat imageViewH = self.bounds.size.height;
        if (imageSize.width > 0) {
            imageViewH = self.bounds.size.width * (imageSize.height / imageSize.width);
        }
        _zoomingImageView.bounds = CGRectMake(0, 0, self.bounds.size.width, imageViewH);
        _zoomingImageView.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _zoomingImageView;
}

- (BOOL)isScaled {
    return 1.0 != _totalScale;
}

- (void)layoutSubviews
{
    [super layoutSubviews];
    _waitingView.center = CGPointMake(self.frame.size.width * 0.5, self.frame.size.height * 0.5);
    
    CGSize imageSize = self.image.size;
    
    if (self.bounds.size.width * (imageSize.height / imageSize.width) > self.bounds.size.height) {
        if (!_scroolView) {
            UIScrollView *scroll = [[UIScrollView alloc] init];
            scroll.backgroundColor = [UIColor whiteColor];
            UIImageView *imageView = [[UIImageView alloc] init];
            imageView.image = self.image;
            _scrollImageView = imageView;
            [scroll addSubview:imageView];
            scroll.backgroundColor = GET_COLOR(@"000000");
            _scroolView = scroll;
            [self addSubview:scroll];
            if (_waitingView) {
                [self bringSubviewToFront:_waitingView];
            }
        }
        _scroolView.frame = self.bounds;
        
        CGFloat imageViewH = self.bounds.size.width * (imageSize.height / imageSize.width);
        
        _scrollImageView.bounds = CGRectMake(0, 0, _scroolView.frame.size.width, imageViewH);
        _scrollImageView.center = CGPointMake(_scroolView.frame.size.width * 0.5, _scrollImageView.frame.size.height * 0.5);
        _scroolView.contentSize = CGSizeMake(0, _scrollImageView.bounds.size.height);
        
    } else {
        if (_scroolView) [_scroolView removeFromSuperview]; // 防止旋转时适配的scrollView的影响
    }
    
}

@end
